<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Caliburn.Micro.Platform.Core</name>
    </assembly>
    <members>
        <member name="T:Caliburn.Micro.AssemblySource">
            <summary>
            A source of assemblies that are inspectable by the framework.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.AssemblySource.Instance">
            <summary>
            The singleton instance of the AssemblySource used by the framework.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.AssemblySource.FindTypeByNames">
            <summary>
            Finds a type which matches one of the elements in the sequence of names.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.AssemblySourceCache">
            <summary>
            A caching subsystem for <see cref="T:Caliburn.Micro.AssemblySource"/>.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.AssemblySourceCache.ExtractTypes">
            <summary>
            Extracts the types from the spezified assembly for storing in the cache.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.AssemblySourceCache.Install">
            <summary>
            Installs the caching subsystem.
            </summary>
        </member>
        <member name="T:Caliburn.Micro.ExtensionMethods">
            <summary>
            Generic extension methods used by the framework.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.ExtensionMethods.GetAssemblyName(System.Reflection.Assembly)">
            <summary>
            Get's the name of the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>The assembly's name.</returns>
        </member>
        <member name="M:Caliburn.Micro.ExtensionMethods.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Gets all the attributes of a particular type.
            </summary>
            <typeparam name="T">The type of attributes to get.</typeparam>
            <param name="member">The member to inspect for attributes.</param>
            <param name="inherit">Whether or not to search for inherited attributes.</param>
            <returns>The list of attributes found.</returns>
        </member>
        <member name="M:Caliburn.Micro.ExtensionMethods.GetExportedTypes(System.Reflection.Assembly)">
            <summary>
            Gets a collection of the public types defined in this assembly that are visible outside the assembly.
            </summary>
            <param name="assembly">The assembly.</param>
            <returns>A collection of the public types defined in this assembly that are visible outside the assembly.</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Caliburn.Micro.ExtensionMethods.IsAssignableFrom(System.Type,System.Type)">
            <summary>
            Returns a value that indicates whether the specified type can be assigned to the current type.
            </summary>
            <param name="target">The target type</param>
            <param name="type">The type to check.</param>
            <returns>true if the specified type can be assigned to this type; otherwise, false.</returns>
        </member>
        <member name="M:Caliburn.Micro.ExtensionMethods.GetValueOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Gets the value for a key. If the key does not exist, return default(TValue);
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <param name="dictionary">The dictionary to call this method on.</param>
            <param name="key">The key to look up.</param>
            <returns>The key value. default(TValue) if this key is not in the dictionary.</returns>
        </member>
        <member name="T:Caliburn.Micro.NameTransformer">
            <summary>
             Class for managing the list of rules for doing name transformation.
            </summary>
        </member>
        <member name="P:Caliburn.Micro.NameTransformer.UseEagerRuleSelection">
            <summary>
            Flag to indicate if transformations from all matched rules are returned. Otherwise, transformations from only the first matched rule are returned.
            </summary>
        </member>
        <member name="M:Caliburn.Micro.NameTransformer.AddRule(System.String,System.String,System.String)">
            <summary>
             Adds a transform using a single replacement value and a global filter pattern.
            </summary>
            <param name = "replacePattern">Regular expression pattern for replacing text</param>
            <param name = "replaceValue">The replacement value.</param>
            <param name = "globalFilterPattern">Regular expression pattern for global filtering</param>
        </member>
        <member name="M:Caliburn.Micro.NameTransformer.AddRule(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
             Adds a transform using a list of replacement values and a global filter pattern.
            </summary>
            <param name = "replacePattern">Regular expression pattern for replacing text</param>
            <param name = "replaceValueList">The list of replacement values</param>
            <param name = "globalFilterPattern">Regular expression pattern for global filtering</param>
        </member>
        <member name="M:Caliburn.Micro.NameTransformer.Transform(System.String)">
            <summary>
            Gets the list of transformations for a given name.
            </summary>
            <param name = "source">The name to transform into the resolved name list</param>
            <returns>The transformed names.</returns>
        </member>
        <member name="M:Caliburn.Micro.NameTransformer.Transform(System.String,System.Func{System.String,System.String})">
            <summary>
            Gets the list of transformations for a given name.
            </summary>
            <param name = "source">The name to transform into the resolved name list</param>
            <param name = "getReplaceString">A function to do a transform on each item in the ReplaceValueList prior to applying the regular expression transform</param>
            <returns>The transformed names.</returns>
        </member>
        <member name="T:Caliburn.Micro.NameTransformer.Rule">
            <summary>
             A rule that describes a name transform.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.NameTransformer.Rule.GlobalFilterPattern">
            <summary>
            Regular expression pattern for global filtering
            </summary>
        </member>
        <member name="F:Caliburn.Micro.NameTransformer.Rule.ReplacePattern">
            <summary>
            Regular expression pattern for replacing text
            </summary>
        </member>
        <member name="F:Caliburn.Micro.NameTransformer.Rule.ReplacementValues">
            <summary>
            The list of replacement values
            </summary>
        </member>
        <member name="P:Caliburn.Micro.NameTransformer.Rule.GlobalFilterPatternRegex">
            <summary>
            Regular expression for global filtering
            </summary>
        </member>
        <member name="P:Caliburn.Micro.NameTransformer.Rule.ReplacePatternRegex">
            <summary>
            Regular expression for replacing text
            </summary>
        </member>
        <member name="T:Caliburn.Micro.RegExHelper">
            <summary>
             Helper class for encoding strings to regular expression patterns
            </summary>
        </member>
        <member name="F:Caliburn.Micro.RegExHelper.NameRegEx">
            <summary>
            Regular expression pattern for valid name
            </summary>
        </member>
        <member name="F:Caliburn.Micro.RegExHelper.SubNamespaceRegEx">
            <summary>
            Regular expression pattern for subnamespace (including dot)
            </summary>
        </member>
        <member name="F:Caliburn.Micro.RegExHelper.NamespaceRegEx">
            <summary>
            Regular expression pattern for namespace or namespace fragment
            </summary>
        </member>
        <member name="M:Caliburn.Micro.RegExHelper.GetCaptureGroup(System.String,System.String)">
            <summary>
            Creates a named capture group with the specified regular expression 
            </summary>
            <param name="groupName">Name of capture group to create</param>
            <param name="regEx">Regular expression pattern to capture</param>
            <returns>Regular expression capture group with the specified group name</returns>
        </member>
        <member name="M:Caliburn.Micro.RegExHelper.NamespaceToRegEx(System.String)">
            <summary>
            Converts a namespace (including wildcards) to a regular expression string
            </summary>
            <param name="srcNamespace">Source namespace to convert to regular expression</param>
            <returns>Namespace converted to a regular expression</returns>
        </member>
        <member name="M:Caliburn.Micro.RegExHelper.GetNameCaptureGroup(System.String)">
            <summary>
            Creates a capture group for a valid name regular expression pattern
            </summary>
            <param name="groupName">Name of capture group to create</param>
            <returns>Regular expression capture group with the specified group name</returns>
        </member>
        <member name="M:Caliburn.Micro.RegExHelper.GetNamespaceCaptureGroup(System.String)">
            <summary>
            Creates a capture group for a namespace regular expression pattern
            </summary>
            <param name="groupName">Name of capture group to create</param>
            <returns>Regular expression capture group with the specified group name</returns>
        </member>
        <member name="T:Caliburn.Micro.StringSplitter">
            <summary>
            Helper class when splitting strings
            </summary>
        </member>
        <member name="M:Caliburn.Micro.StringSplitter.Split(System.String,System.Char)">
            <summary>
            Splits a string with a chosen separator. 
            If a substring is contained in [...] it will not be splitted.
            </summary>
            <param name="message">The message to split</param>
            <param name="separator">The separator to use when splitting</param>
            <returns></returns>
        </member>
        <member name="M:Caliburn.Micro.StringSplitter.SplitParameters(System.String)">
            <summary>
            Splits a string with , as separator. 
            Does not split within {},[],()
            </summary>
            <param name="parameters">The string to split</param>
            <returns></returns>
        </member>
        <member name="T:Caliburn.Micro.TypeMappingConfiguration">
            <summary>
            Class to specify settings for configuring type mappings by the ViewLocator or ViewModelLocator
            </summary>
        </member>
        <member name="F:Caliburn.Micro.TypeMappingConfiguration.DefaultSubNamespaceForViews">
            <summary>
            The default subnamespace for Views. Used for creating default subnamespace mappings. Defaults to "Views".
            </summary>
        </member>
        <member name="F:Caliburn.Micro.TypeMappingConfiguration.DefaultSubNamespaceForViewModels">
            <summary>
            The default subnamespace for ViewModels. Used for creating default subnamespace mappings. Defaults to "ViewModels".
            </summary>
        </member>
        <member name="F:Caliburn.Micro.TypeMappingConfiguration.UseNameSuffixesInMappings">
            <summary>
            Flag to indicate whether or not the name of the Type should be transformed when adding a type mapping. Defaults to true.
            </summary>
        </member>
        <member name="F:Caliburn.Micro.TypeMappingConfiguration.NameFormat">
            <summary>
            The format string used to compose the name of a type from base name and name suffix
            </summary>
        </member>
        <member name="F:Caliburn.Micro.TypeMappingConfiguration.IncludeViewSuffixInViewModelNames">
            <summary>
            Flag to indicate if ViewModel names should include View suffixes (i.e. CustomerPageViewModel vs. CustomerViewModel)
            </summary>
        </member>
        <member name="F:Caliburn.Micro.TypeMappingConfiguration.ViewSuffixList">
            <summary>
            List of View suffixes for which default type mappings should be created. Applies only when UseNameSuffixesInMappings = true.
            Default values are "View", "Page"
            </summary>
        </member>
        <member name="F:Caliburn.Micro.TypeMappingConfiguration.ViewModelSuffix">
            <summary>
            The name suffix for ViewModels. Applies only when UseNameSuffixesInMappings = true. The default is "ViewModel".
            </summary>
        </member>
    </members>
</doc>
